"""This module parses BitBay wallet via BB public & private Api"""
import time
import hmac
import hashlib
import uuid
import requests


PUBLIC_KEY = ""
SECRET_KEY = ""

class BitBay:
    """A class to represent a BitBay wallet parser

    ...

    Attributes
    ----------
    public_key : str
        Public key generated by BitBay
    secret_key : str
        Secret key generated by BitBay

    Methods
    ----------
    wallet_value()
        Function returns actual wallet value in PLN.
    """

    def __init__(self, public_key: str, secret_key: str):
        self.public_key = public_key
        self.secret_key = secret_key
        self.balance_url = "https://api.bitbay.net/rest/balances/BITBAY/balance"
        self.ticker_url = "https://api.bitbay.net/rest/trading/ticker"
        self.wallet = {}

        self._wallet_update()

    def _wallet_update(self):
        """A function for parsing wallet from BitBay api"""
        signature, timestamp = self.create_signature(self.public_key, self.secret_key)
        headers = {'content-type': 'application/json',
                   'API-Key': self.public_key,
                   'API-Hash': signature,
                   'Request-Timestamp': str(timestamp),
                   'operation-id': str(uuid.uuid4())}

        response = requests.request("GET", self.balance_url, headers=headers)
        data = response.json()

        for currency in data['balances']:
            if currency["totalFunds"] > 0E-8:
                self.wallet[currency['name']] = {'amount':currency['totalFunds'], 'rate': None}

        headers = {'content-type': 'application/json'}
        response = requests.request("GET", self.ticker_url, headers=headers)
        data = response.json()

        for currency in self.wallet:
            if currency == 'PLN':
                self.wallet[currency]['rate'] = 1
                continue
            self.wallet[currency]['rate'] = float(data['items'][str(currency) + '-PLN']['rate'])

    def wallet_value(self) -> float:
        """Function returns the total value of the wallet in PLN."""
        value = sum([v['amount'] * v['rate'] for k,v in self.wallet.items()])
        return value

    @staticmethod
    def create_signature(public_key: str, secret_key: str):
        """Function for generating signature needed for Private BitBay api authorization"""
        timestamp = int(time.time())
        message = public_key + str(timestamp)
        message = message.encode('utf-8')
        signature = hmac.new(secret_key.encode('utf-8'), message, hashlib.sha512).hexdigest()
        return signature, timestamp


if __name__ == "__main__":
    bitbay = BitBay(PUBLIC_KEY, SECRET_KEY)
    print(bitbay.wallet_value())

